{"version":3,"sources":["components/CalendarEvent.js","components/CalendarWeekRow.js","components/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Label","styled","span","_templateObject","props","col","colSpan","color","defaultProps","CalendarEvent","title","onClick","react_default","a","createElement","Row","div","CalendarWeekRow_templateObject","DayHeader","_templateObject2","dimmed","CalendarWeekRow","year","month","dates","events","map","date","getFullYear","getMonth","key","getDate","event","findIndex","valueOf","beginDate","endDate","components_CalendarEvent","id","alert","concat","monthNames","Container","Calendar_templateObject","Header","Calendar_templateObject2","RowContainer","_templateObject3","Calendar","weeks","firstDayInMonth","Date","lastDayInMonth","firstDayInCalendar","getDay","lastDayInCalendar","currentDate","push","length","setDate","i","components_CalendarWeekRow","filter","App_templateObject","Controls","App_templateObject2","Button","button","App_templateObject3","App","_useState","useState","_useState2","Object","slicedToArray","setYear","_useState3","_useState4","setMonth","_useState5","_useState6","setEvents","useEffect","newEvents","beginDay","Math","floor","random","endDay","min","App_Container","prevMonth","nextMonth","components_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a613619c.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst Label = styled.span`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  grid-column: ${props => props.col} / span ${props => props.colSpan};\r\n  background: ${props => props.color};\r\n  font-size: 0.8rem;\r\n  line-height: 0.8rem;\r\n  padding: 2px 6px;\r\n`;\r\nLabel.defaultProps = {\r\n  color: '#ddf',\r\n};\r\n\r\nconst CalendarEvent = props => {\r\n  const { title, col, colSpan, onClick } = props;\r\n\r\n  return (\r\n    <Label col={col} colSpan={colSpan} onClick={onClick}>\r\n      {title}\r\n    </Label>\r\n  );\r\n};\r\nCalendarEvent.propTypes = {\r\n  title: PropTypes.string,\r\n  col: PropTypes.number,\r\n  colSpan: PropTypes.number,\r\n  onClick: PropTypes.func,\r\n};\r\nCalendarEvent.defaultProps = {\r\n  title: '',\r\n  col: 1,\r\n  colSpan: 1,\r\n  onClick: () => {},\r\n};\r\n\r\nexport default CalendarEvent;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nimport CalendarEvent from './CalendarEvent';\r\n\r\nconst Row = styled.div`\r\n  display: grid;\r\n  flex-basis: 100%;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  grid-template-rows: 1.2rem repeat(5, 0.8rem);\r\n  grid-auto-flow: dense;\r\n  grid-gap: 3px 6px;\r\n`;\r\n\r\nconst DayHeader = styled.span`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  color: ${props => (props.dimmed ? '#bbb' : '#000')};\r\n  font-weight: ${props => (props.dimmed ? 'normal' : 'bold')};\r\n`;\r\n\r\nconst CalendarWeekRow = props => {\r\n  const { year, month, dates, events } = props;\r\n\r\n  return (\r\n    <Row>\r\n      {dates.map(date => (\r\n        <DayHeader\r\n          dimmed={date.getFullYear() !== year || date.getMonth() !== month - 1}\r\n          key={date}\r\n        >\r\n          {date.getDate()}\r\n        </DayHeader>\r\n      ))}\r\n      {events.map(event => {\r\n        const col =\r\n            dates.findIndex(\r\n              date => date.valueOf() === event.beginDate.valueOf()\r\n            ) + 1 || 1,\r\n          colSpan =\r\n            (dates.findIndex(\r\n              date => date.valueOf() === event.endDate.valueOf()\r\n            ) + 1 || 7) -\r\n            col +\r\n            1;\r\n\r\n        return (\r\n          <CalendarEvent\r\n            title={event.title}\r\n            col={col}\r\n            colSpan={colSpan}\r\n            key={event.id}\r\n            onClick={() => alert(`${event.title} Clicked!`)}\r\n          />\r\n        );\r\n      })}\r\n    </Row>\r\n  );\r\n};\r\nCalendarWeekRow.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  month: PropTypes.number.isRequired,\r\n};\r\nCalendarWeekRow.defaultProps = {\r\n  events: [],\r\n};\r\n\r\nexport default CalendarWeekRow;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport CalendarWeekRow from './CalendarWeekRow';\r\n\r\nconst monthNames = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December',\r\n];\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst RowContainer = styled.div`\r\n  display: grid;\r\n  grid-auto-rows: 1fr;\r\n`;\r\n\r\nconst Calendar = props => {\r\n  const { year, month, events } = props;\r\n\r\n  const weeks = [];\r\n  const firstDayInMonth = new Date(year, month - 1, 1),\r\n    lastDayInMonth = new Date(year, month, 0),\r\n    firstDayInCalendar = new Date(\r\n      year,\r\n      month - 1,\r\n      1 - firstDayInMonth.getDay()\r\n    ),\r\n    lastDayInCalendar = new Date(\r\n      year,\r\n      month - 1,\r\n      lastDayInMonth.getDate() + 6 - lastDayInMonth.getDay()\r\n    );\r\n\r\n  let currentDate = firstDayInCalendar;\r\n  while (currentDate <= lastDayInCalendar) {\r\n    if (currentDate.getDay() === 0) {\r\n      weeks.push([]);\r\n    }\r\n    weeks[weeks.length - 1].push(new Date(currentDate));\r\n    currentDate = new Date(currentDate.setDate(currentDate.getDate() + 1));\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <h1>\r\n          {monthNames[month - 1]} {year}\r\n        </h1>\r\n      </Header>\r\n      <RowContainer>\r\n        {weeks.map((dates, i) => (\r\n          <CalendarWeekRow\r\n            year={year}\r\n            month={month}\r\n            dates={dates}\r\n            events={events.filter(\r\n              event =>\r\n                event.beginDate <= dates[dates.length - 1] &&\r\n                event.endDate >= dates[0]\r\n            )}\r\n            key={i}\r\n          />\r\n        ))}\r\n      </RowContainer>\r\n    </Container>\r\n  );\r\n};\r\nCalendar.propTypes = {\r\n  year: PropTypes.number.isRequired,\r\n  month: PropTypes.number.isRequired,\r\n  events: PropTypes.arrayOf(PropTypes.object),\r\n};\r\nCalendar.defaultProps = {\r\n  events: [],\r\n};\r\n\r\nexport default Calendar;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Calendar from './components/Calendar';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 900px;\r\n  margin: 1rem auto;\r\n`;\r\n\r\nconst Controls = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: transparent;\r\n  border: none;\r\n\r\n  &:hover {\r\n    color: #777;\r\n  }\r\n`;\r\n\r\nconst App = () => {\r\n  const [year, setYear] = useState(new Date().getFullYear());\r\n  const [month, setMonth] = useState(new Date().getMonth() + 1);\r\n  const [events, setEvents] = useState([]);\r\n\r\n  const loadPrevMonth = () => {\r\n    let prevMonth = month - 1;\r\n    if (prevMonth < 1) {\r\n      setYear(year - 1);\r\n      prevMonth = 12;\r\n    }\r\n    setMonth(prevMonth);\r\n  };\r\n\r\n  const loadNextMonth = () => {\r\n    let nextMonth = month + 1;\r\n    if (nextMonth > 12) {\r\n      setYear(year + 1);\r\n      nextMonth = 1;\r\n    }\r\n    setMonth(nextMonth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const newEvents = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      const beginDay = Math.floor(Math.random() * 28),\r\n        endDay = Math.min(beginDay + Math.floor(Math.random() * 8), 28);\r\n      newEvents.push({\r\n        id: i + 1,\r\n        title: `Event ${i + 1}`,\r\n        beginDate: new Date(year, month - 1, beginDay),\r\n        endDate: new Date(year, month - 1, endDay),\r\n      });\r\n    }\r\n    setEvents(newEvents);\r\n  }, [year, month]);\r\n\r\n  return (\r\n    <Container>\r\n      <Controls>\r\n        <Button onClick={loadPrevMonth}>&laquo; Prev Month</Button>\r\n        <Button onClick={loadNextMonth}>Next Month &raquo;</Button>\r\n      </Controls>\r\n      <Calendar year={year} month={month} events={events} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}